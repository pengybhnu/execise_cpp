// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: servicet.proto

#include "servicet.pb.h"
#include "servicet.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* DeviceState_method_names[] = {
  "/DeviceState/UpdateWorkArea",
};

std::unique_ptr< DeviceState::Stub> DeviceState::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceState::Stub> stub(new DeviceState::Stub(channel, options));
  return stub;
}

DeviceState::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UpdateWorkArea_(DeviceState_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceState::Stub::UpdateWorkArea(::grpc::ClientContext* context, const ::WorkAreaReq& request, ::WorkAreaStateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::WorkAreaReq, ::WorkAreaStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateWorkArea_, context, request, response);
}

void DeviceState::Stub::async::UpdateWorkArea(::grpc::ClientContext* context, const ::WorkAreaReq* request, ::WorkAreaStateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::WorkAreaReq, ::WorkAreaStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWorkArea_, context, request, response, std::move(f));
}

void DeviceState::Stub::async::UpdateWorkArea(::grpc::ClientContext* context, const ::WorkAreaReq* request, ::WorkAreaStateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateWorkArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::WorkAreaStateReply>* DeviceState::Stub::PrepareAsyncUpdateWorkAreaRaw(::grpc::ClientContext* context, const ::WorkAreaReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::WorkAreaStateReply, ::WorkAreaReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateWorkArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::WorkAreaStateReply>* DeviceState::Stub::AsyncUpdateWorkAreaRaw(::grpc::ClientContext* context, const ::WorkAreaReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateWorkAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceState::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceState_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceState::Service, ::WorkAreaReq, ::WorkAreaStateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceState::Service* service,
             ::grpc::ServerContext* ctx,
             const ::WorkAreaReq* req,
             ::WorkAreaStateReply* resp) {
               return service->UpdateWorkArea(ctx, req, resp);
             }, this)));
}

DeviceState::Service::~Service() {
}

::grpc::Status DeviceState::Service::UpdateWorkArea(::grpc::ServerContext* context, const ::WorkAreaReq* request, ::WorkAreaStateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


